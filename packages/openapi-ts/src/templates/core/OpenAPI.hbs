{{~#equals @root.$config.client 'axios'~}}
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
{{~/equals~}}
{{~#equals @root.$config.client 'node'~}}
import type { RequestInit, Response } from 'node-fetch';
{{~/equals~}}

import type { ApiRequestOptions } from './ApiRequestOptions';

type Headers = Record<string, string>;
type Middleware<T> = (value: T) => T | Promise<T>;
type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export class Interceptors<T> {
  _fns: Middleware<T>[];

  constructor() {
    this._fns = [];
  }

  eject(fn: Middleware<T>) {
    const index = this._fns.indexOf(fn);
    if (index !== -1) {
      this._fns = [
        ...this._fns.slice(0, index),
        ...this._fns.slice(index + 1),
      ];
    }
  }

  use(fn: Middleware<T>) {
    this._fns = [...this._fns, fn];
  }
}
type GetKey =  (() => Promise<string | null>);
type UpdateKey = ((val: string) => Promise<void>);
export type OpenAPIConfig = {
	CREO_CLIENT_ID: string;
	CREO_CLIENT_SECRET: string;
	getKey: GetKey;
  updateKey: UpdateKey;
	interceptors?: {
		{{~#equals @root.$config.client 'axios'~}}
		request: Interceptors<AxiosRequestConfig>;
		response: Interceptors<AxiosResponse>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'fetch'~}}
		request: Interceptors<RequestInit>;
		response: Interceptors<Response>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'node'~}}
		request: Interceptors<RequestInit>;
		response: Interceptors<Response>;
		{{~/equals~}}
		{{~#equals @root.$config.client 'xhr'~}}
		request: Interceptors<XMLHttpRequest>;
		response: Interceptors<XMLHttpRequest>;
		{{~/equals~}}
	};
};

export const OpenAPI: OpenAPIConfig = {
	CREO_CLIENT_ID: '',
	CREO_CLIENT_SECRET: '',
  getKey: () => Promise.resolve(''),
  updateKey: () => Promise.resolve(),
	interceptors: {
		request: new Interceptors(),
		response: new Interceptors(),
	},
};
